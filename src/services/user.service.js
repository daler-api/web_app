import {Basket, Order, Product, User} from "../models/models.js";
import _ from "lodash";
import {calculateTotalPrice} from "../handlers/handleUser.js";
import {DATA_PAYMENT_BACK, DATA_PAYMENTS} from "../utils/buttons/paymentButtons.js";
import {DATA_BONUS_CANCEL, DATA_BONUS_CONFIRM} from "../utils/buttons/userButtons.js";

const UserService = {

    async Products(req, res) {
        return res.status(200).json(await Product.findAll({raw: true, order: [['id', 'DESC']]}))
    },

    async Basket(req, res) {
        const {user_id} = req.body

        const basket = await Basket.findAll({
            raw: true,
            where: {
                user_id
            }
        })

        return res.status(200).json(basket)
    },

    async WebData(req, res, bot) {

        try {
            const {queryId, basket, totalPrice, userId} = req.body

            let order = await Order.findOrCreate({
                where: {
                    user_id: _.toInteger(userId),
                    isPayment: 0,
                },
                raw: true
            })

            order = _.first(order).dataValues ?? _.first(order)


            let user = await User.findOne({
                raw: true,
                where: {
                    user_id: _.toInteger(userId),
                }
            })

            await Basket.destroy({
                where: {user_id: _.toInteger(userId)}
            })

            const newBasket = []

            basket?.map(async (product) => {

                newBasket.push({
                    product_id: _.toInteger(product?.product_id),
                    count: _.toInteger(product?.count),
                    order_id: _.toInteger(order?.id),
                    user_id: _.toInteger(userId)
                })

            })

            await Basket.bulkCreate(newBasket)

            const calculate = await calculateTotalPrice(user)

            if (calculate?.totalPrice > 100 && _.toInteger(user?.bonus) === 0 || calculate?.totalPrice <= 100) {
                await bot.telegram.answerWebAppQuery(queryId, {
                    type: 'article',
                    id: queryId,
                    title: 'title',
                    input_message_content: {
                        message_text: `<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã</b>\n\n${calculate?.basketToString}<b>üí≥ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ —Å —É—á—ë—Ç–æ–º —Å–ø–∏—Å–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –∏ –ø—Ä–æ–º–æ: </b>${calculate?.totalPrice} —Ä—É–±. <b>\n\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> –Æ–∫–∞—Å—Å–∞\n\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "üí∞ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–≤–æ–π –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ "üîô –ù–∞–∑–∞–¥"`,
                        parse_mode: 'HTML',
                    },
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {text: 'üí∞ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', callback_data: DATA_PAYMENTS},
                            ],
                            [
                                {text: 'üîô –ù–∞–∑–∞–¥', callback_data: DATA_PAYMENT_BACK},
                            ],
                        ]
                    }
                })
            } else {
                user = await User.findOne({
                    raw: true,
                    where: {
                        user_id: _.toInteger(userId),
                    }
                })
                await bot.telegram.sendMessage(userId, `–ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –≤—ã —Å–ø–∏—Å–∞—Ç—å –∏–º–µ—é—â–∏–µ—Å—è –±–æ–Ω—É—Å—ã?\n\n1 –±–æ–Ω—É—Å = 1 —Ä—É–±.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–ø–∏—Å–∞—Ç—å —Å—Ä–∞–∑—É –≤—Å–µ –±–æ–Ω—É—Å—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å, –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ –¥–∞–Ω–Ω—É—é –ø–æ–∫—É–ø–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–º–µ—Ä–µ.\n\n–í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤: ${user?.bonus} —Ä—É–±.\n\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${calculate?.totalPrice} —Ä—É–±.`, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {text: '–î–∞', callback_data: DATA_BONUS_CONFIRM},
                                {text: '–ù–µ—Ç', callback_data: DATA_BONUS_CANCEL},
                            ],
                            [
                                {text: 'üîô –ù–∞–∑–∞–¥', callback_data: DATA_PAYMENT_BACK},
                            ],
                        ]
                    }
                })
                // await bot.telegram.answerWebAppQuery(queryId, {
                //     type: 'article',
                //     id: queryId,
                //     title: 'title',
                //     input_message_content: {
                //         message_text: `‚¨ÜÔ∏è –§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã`,
                //         parse_mode: 'HTML',
                //     }
                // })
            }
            return res.status(200).json({})
        } catch (e) {
            console.log(e)
            return res.status(400).json({})
        }

    }

}

export default UserService
