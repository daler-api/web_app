import {
    ADMIN_INLINE_KEYBOARD,
    CANCEL_BUTTON, DATA_CANCEL,
    DATA_MAILING_CANCEL, DATA_MAILING_CONFIRM,
} from "../utils/buttons/adminButtons.js";
import {Composer, Markup, Scenes} from "telegraf";
import {Order, Referral, Setting, User} from "../models/models.js";
import {sceneIds} from "../utils/consts.js";
import _ from "lodash";

export async function handleAdmin(ctx) {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω', ADMIN_INLINE_KEYBOARD)
}

export async function handleAdminMenu(ctx) {
    await ctx.reply('–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', ADMIN_INLINE_KEYBOARD)
}

export async function handleDiscount(ctx) {
    try {
        await ctx.deleteMessage()
        await ctx.replyWithHTML('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ % —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä <b>"10"</b>.', CANCEL_BUTTON)
        await ctx.answerCbQuery()
        await ctx.scene.enter(sceneIds.admin.SCENE_ADD_DISCOUNT)
    } catch (e) {
        console.log(e)
    }
}

const DiscountStep = new Composer()
DiscountStep.on('text', async ctx => {
    try {

        const message = ctx.update.message

        if (_.toInteger(message.text) > 0 && _.toInteger(message.text) <= 100) {

            const result = await Setting.findAll({
                limit: 1,
                order: [['id', 'DESC']]
            })
                .then(function (obj) {
                    const first = _.first(obj);

                    if (first?.dataValues?.id) {
                        return first.update({
                            discount: _.toInteger(message.text)
                        });
                    }

                    return Setting.create({
                        discount: _.toInteger(message.text)
                    });

                })

            await ctx.scene.leave()
            await ctx.deleteMessage()
            await ctx.replyWithHTML(`‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã! \n\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ —Å–∫–∏–¥–∫–∞ –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å ${result?.discount}%.`, ADMIN_INLINE_KEYBOARD)
        } else {
            await ctx.reply('–í–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!')
        }

    } catch (e) {
        console.log(e)
    }
})
export const sceneAddDiscount = new Scenes.WizardScene(sceneIds.admin.SCENE_ADD_DISCOUNT, DiscountStep)


export async function handleBonus(ctx) {
    try {
        await ctx.deleteMessage()
        await ctx.replyWithHTML('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –Ω–∞—á–∏—Å–ª—è–µ–º—ã—Ö –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ % —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä <b>"20"</b>.', CANCEL_BUTTON)
        await ctx.answerCbQuery()
        await ctx.scene.enter(sceneIds.admin.SCENE_ADD_BONUS)
    } catch (e) {
        console.log(e)
    }
}

const BonusStep = new Composer()
BonusStep.on('text', async ctx => {
    try {

        const message = ctx.update.message

        if (_.toInteger(message.text) > 0 && _.toInteger(message.text) <= 100) {

            await Setting.findAll({
                limit: 1,
                order: [['id', 'DESC']]
            })
                .then(function (obj) {
                    const first = _.first(obj);

                    if (first?.dataValues?.id) {
                        return first.update({
                            bonus: _.toInteger(message.text)
                        });
                    }

                    return Setting.create({
                        bonus: _.toInteger(message.text)
                    });

                })

            await ctx.scene.leave()
            await ctx.deleteMessage()
            await ctx.replyWithHTML(`‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã! \n\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Ä–µ—Ñ —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –±–æ–Ω—É—Å—ã –≤ —Ä–∞–∑–º–µ—Ä–µ ${_.toInteger(message.text)}% –æ—Ç –µ–≥–æ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏.`, ADMIN_INLINE_KEYBOARD)
        } else {
            await ctx.reply('–í–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!')
        }

    } catch (e) {
        console.log(e)
        await ctx.reply('–í–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!')
    }
})
export const sceneAddBonus = new Scenes.WizardScene(sceneIds.admin.SCENE_ADD_BONUS, BonusStep)


export async function handleRefBonus(ctx) {
    try {
        await ctx.deleteMessage()
        await ctx.replyWithHTML('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –Ω–∞—á–∏—Å–ª—è–µ–º—ã—Ö –±–æ–Ω—É—Å–æ–≤ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ % —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä <b>"20"</b>.', CANCEL_BUTTON)
        await ctx.answerCbQuery()
        await ctx.scene.enter(sceneIds.admin.SCENE_ADD_REF_BONUS)
    } catch (e) {
        console.log(e)
    }
}

const RefBonusStep = new Composer()
RefBonusStep.on('text', async ctx => {
    try {

        const message = ctx.update.message

        if (_.toInteger(message.text) > 0 && _.toInteger(message.text) <= 100) {

            await Setting.findAll({
                limit: 1,
                order: [['id', 'DESC']]
            })
                .then(function (obj) {
                    const first = _.first(obj);

                    if (first?.dataValues?.id) {
                        return first.update({
                            ref_bonus: _.toInteger(message.text)
                        });
                    }

                    return Setting.create({
                        ref_bonus: _.toInteger(message.text)
                    });

                })

            await ctx.scene.leave()
            await ctx.deleteMessage()
            await ctx.replyWithHTML(`‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã! \n\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Ä–µ—Ñ —Å—Å—ã–ª–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—É –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –±–æ–Ω—É—Å—ã –≤ —Ä–∞–∑–º–µ—Ä–µ ${_.toInteger(message.text)}% –æ—Ç –µ–≥–æ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏.`, ADMIN_INLINE_KEYBOARD)
        } else {
            await ctx.reply('–í–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!')
        }

    } catch (e) {
        console.log(e)
        await ctx.reply('–í–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!')
    }
})
export const sceneAddRefBonus = new Scenes.WizardScene(sceneIds.admin.SCENE_ADD_REF_BONUS, RefBonusStep)


export async function handleReferral(ctx) {
    try {
        await ctx.deleteMessage()
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø—Ä–æ–º–æ—É—Ç–µ—Ä–∞', CANCEL_BUTTON)
        await ctx.answerCbQuery()
        await ctx.scene.enter(sceneIds.admin.SCENE_ADD_REFERRAL)
    } catch (e) {
        console.log(e)
    }
}

const ReferralStep = new Composer()
ReferralStep.on('text', async ctx => {
    try {

        const message = ctx.update.message

        if (_.toInteger(message.text) > 0) {
            await ctx.scene.leave()
            await ctx.deleteMessage()

            const referral = await Referral.findOne({
                where: {user_id: _.toInteger(message.text)},
                raw: true
            })

            if (referral?.user_id) {
                await ctx.reply(`–†–µ—Ñ–µ—Ä–∞–ª —Å —Ç–∞–∫–∏–º ID: ${referral?.user_id} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω`, ADMIN_INLINE_KEYBOARD)
            } else {
                const created = await Referral.create({
                    user_id: _.toInteger(message.text),
                })
                await ctx.replyWithHTML(`–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω! –°—Å—ã–ª–∫–∞: <a href="https://t.me/${process.env.BOT_USERNAME}?start=${created.user_id}">—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</a>`, Object.assign({}, ADMIN_INLINE_KEYBOARD, {
                    disable_web_page_preview: true
                }))
            }
        } else {
            await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID!')
        }

    } catch (e) {
        console.log(e)
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID!')
    }
})
export const sceneAddReferral = new Scenes.WizardScene(sceneIds.admin.SCENE_ADD_REFERRAL, ReferralStep)


export async function handleReferralCount(ctx) {
    try {
        await ctx.deleteMessage()
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', CANCEL_BUTTON)
        await ctx.answerCbQuery()
        await ctx.scene.enter(sceneIds.admin.SCENE_ADD_REFERRAL_COUNT)
    } catch (e) {
        console.log(e)
    }
}

const ReferralCountStep = new Composer()
ReferralCountStep.on('text', async ctx => {
    try {
        const message = ctx.update.message
        let totalPrice = 0

        if (_.toInteger(message.text) > 0) {
            await ctx.scene.leave()
            await ctx.deleteMessage()

            const user = await User.findOne({
                raw: true,
                where: {
                    user_id: _.toInteger(message.text),
                }
            })

            const orders = await Order.findAll({
                raw: true,
                where: {user_id: _.toInteger(message.text), isPayment: 1},
            }).then((orders) => {
                for (const key in orders) {
                    totalPrice += _.toInteger(orders[key]?.total_price) ?? 0
                }
                return {
                    totalPrice,
                    count: orders?.length
                }
            })

            await ctx.replyWithHTML(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ ${message.text}\n\nüí´<b>–í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤</b>: ${user?.bonus ?? 0}\nüëú<b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</b>: ${orders?.count ?? 0} \nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: ${totalPrice} —Ä—É–±`, ADMIN_INLINE_KEYBOARD)
        } else {
            await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID!')
        }
    } catch (e) {
        console.log(e);
    }
})
export const sceneAddReferralCount = new Scenes.WizardScene(sceneIds.admin.SCENE_ADD_REFERRAL_COUNT, ReferralCountStep)


export async function handleAddAdmin(ctx) {
    try {
        await ctx.deleteMessage()
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º', CANCEL_BUTTON)
        await ctx.answerCbQuery()
        await ctx.scene.enter(sceneIds.admin.SCENE_ADD_ADMIN)
    } catch (e) {
        console.log(e)
    }
}

const AddAdminStep = new Composer()
AddAdminStep.on('text', async ctx => {
    try {
        const message = ctx.update.message

        if (_.toInteger(message.text) > 0) {
            const user = await User.findOne({
                raw: true,
                where: {
                    user_id: _.toInteger(message.text)
                }
            })

            if (!user?.id) {
                return await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            }

            await ctx.scene.leave()
            await ctx.deleteMessage()

            await User.update({
                isAdmin: true
            }, {
                raw: true,
                where: {
                    user_id: _.toInteger(message.text),
                }
            })

            await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${user?.username} —Å—Ç–∞–ª –∞–¥–º–∏–Ω–æ–º`)

        } else {
            await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID!')
        }
    } catch (e) {
        console.log(e);
    }
})
export const sceneAddAdmin = new Scenes.WizardScene(sceneIds.admin.SCENE_ADD_ADMIN, AddAdminStep)


export async function handleCancelBonuses(ctx) {
    try {
        await ctx.deleteMessage()
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã', CANCEL_BUTTON)
        await ctx.answerCbQuery()
        await ctx.scene.enter(sceneIds.admin.SCENE_CANCEL_BONUSES)
    } catch (e) {
        console.log(e)
    }
}

const CancelBonusesStep = new Composer()
CancelBonusesStep.on('text', async ctx => {
    try {
        const message = ctx.update.message
        if (_.toInteger(message.text) > 0) {
            await ctx.scene.leave()
            await ctx.deleteMessage()
            await User.update({
                    bonus: 0
                },
                {
                    raw: true,
                    where: {user_id: _.toInteger(message.text)}
                })

            await ctx.replyWithHTML(`–ü–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ ID: ${_.toInteger(message.text)} –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω—ã –±–æ–Ω—É—Å—ã`, ADMIN_INLINE_KEYBOARD)
        } else {
            await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID!')
        }
    } catch (e) {
        console.log(e);
    }
})
export const sceneCancelBonus = new Scenes.WizardScene(sceneIds.admin.SCENE_CANCEL_BONUSES, CancelBonusesStep)


export async function handleReviewUrl(ctx) {
    try {
        await ctx.deleteMessage()
        await ctx.replyWithHTML('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä https://t.me/muhomor3000', Object.assign({}, CANCEL_BUTTON, {
            disable_web_page_preview: true
        }))
        await ctx.answerCbQuery()
        await ctx.scene.enter(sceneIds.admin.SCENE_ADD_REVIEW_URL)
    } catch (e) {
        console.log(e)
    }
}

const ReviewUrlStep = new Composer()
ReviewUrlStep.on('text', async ctx => {
    try {

        const message = ctx.update.message

        if (message.text.startsWith('https://t.me/') || message.text().startsWith('https://telegram.me/')) {

            const result = await Setting.findAll({
                limit: 1,
                order: [['id', 'DESC']]
            })
                .then(function (obj) {
                    const first = _.first(obj);

                    if (first?.dataValues?.id) {
                        return first.update({
                            reviews_url: message.text.replace(' ', '')
                        });
                    }

                    return Setting.create({
                        bonus: message.text.replace(' ', '')
                    });

                })

            await ctx.scene.leave()
            await ctx.deleteMessage()
            await ctx.replyWithHTML(`‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã! \n\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–π–¥—ë—Ç <a href="${result?.reviews_url}">—Å—é–¥–∞</a>.`, Object.assign({}, ADMIN_INLINE_KEYBOARD, {
                disable_web_page_preview: true
            }))
        } else {
            await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É. –ü—Ä–∏–º–µ—Ä: https://t.me/muhomor3000!', {
                disable_web_page_preview: true
            })
        }

    } catch (e) {
        console.log(e)
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É. –ü—Ä–∏–º–µ—Ä: https://t.me/muhomor3000!', {
            disable_web_page_preview: true
        })
    }
})
export const sceneAddReviewUrl = new Scenes.WizardScene(sceneIds.admin.SCENE_ADD_REVIEW_URL, ReviewUrlStep)


export async function handleMailing(ctx) {
    try {
        await ctx.deleteMessage()
        await ctx.answerCbQuery()
        await ctx.scene.enter(sceneIds.admin.SCENE_MAILING)
    } catch (e) {
        console.log(e)
    }
}

export const sceneAddMailing = new Scenes.WizardScene(sceneIds.admin.SCENE_MAILING, (ctx) => {
        ctx.replyWithHTML('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.', CANCEL_BUTTON)
        return ctx.wizard.next()
    },
    async (ctx) => {
        try {
            if (ctx.update?.callback_query?.data === DATA_MAILING_CONFIRM) {
                try {
                    async function waitedProcess() {

                        const users = await User.findAll({
                            where: {active: true},
                            raw: true
                        })
                        const updateMsg = await ctx.replyWithHTML(`üïò <b>–†–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è</b> 0 / ${users.length}...`)

                        await ctx.deleteMessage()
                        await ctx.replyWithHTML(`üïò <b>–†–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è</b> 0 / ${users.length}...`)

                        const result = await callMailing({
                            users,
                            ctx,
                            isCopy: false,
                            myMessage: ctx.session.mailingText,
                            updateMsg
                        })

                        await ctx.replyWithHTML(`‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n–£–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b> ${result?.success}<b>\n–ù–µ —É–¥–∞–ª–æ—Å—å:</b>${result?.error}\n\n‚ùóÔ∏è –¢–µ–º, –∫–æ–º—É –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –±–æ—Ç–∞!`, ADMIN_INLINE_KEYBOARD)

                    }

                    setTimeout(async () => await waitedProcess(), 0)

                } catch (e) {
                    console.log(e)
                    await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.')
                }

                return await ctx.scene.leave()

            } else if (ctx.update?.callback_query?.data === DATA_MAILING_CANCEL) {
                await ctx.deleteMessage()
                return await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', CANCEL_BUTTON)
            } else if (ctx.update?.callback_query?.data === DATA_CANCEL) {
                await handleCancel(ctx)
                return await ctx.scene.leave()
            }

            ctx.session.mailingText = ctx.update?.message?.text
            await ctx.reply(JSON.stringify(ctx.update))
            await ctx.reply(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–∫—Å—Ç–æ–º: \n\n${ctx.session.mailingText}\n\n–ù–∞–∂–º–∏—Ç–µ "‚úÖ –î–ê". —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∏–ª–∏ "üîô –ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è`, Markup.inlineKeyboard([
                [
                    Markup.button.callback('‚úÖ –î–ê', DATA_MAILING_CONFIRM),
                    Markup.button.callback('üîô –ù–∞–∑–∞–¥', DATA_MAILING_CANCEL),
                ],
            ]))
        } catch (e) {
            console.log(e)
        }
    })


export async function handleCancel(ctx) {
    try {
        await ctx.deleteMessage()
        await ctx.scene.leave()
        await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', ADMIN_INLINE_KEYBOARD)
    } catch (e) {
        console.log(e)
    }
}

export async function callMailing(params) {
    try {

        let {users, message, ctx, isCopy = true, myMessage = '', updateMsg} = params

        const resultUsers = [[]]
        let success = 0
        let error = 0

        let activeUsersIndex = 0

        users.forEach((user) => {

            const last = resultUsers[resultUsers.length - 1]

            if (last.length < 29) {
                last.push(user?.user_id)
            } else {
                resultUsers.push([user?.user_id])
            }

        })

        async function step() {

            const usrs = resultUsers[activeUsersIndex++]

            if (!usrs || usrs.length <= 0) {
                return true
            }

            await Promise.all(
                usrs.map(async (userId) => {

                    if (isCopy) {
                        try {
                            await ctx.copyMessage(userId)
                            success++
                        } catch (e) {
                            error++
                        }
                    } else {
                        try {
                            if (myMessage !== '') {
                                await ctx.telegram.sendMessage(userId, myMessage, {parse_mode: 'HTML', ...message?.extra})
                            } else {
                                await ctx.telegram.sendMessage(userId, message.text, {parse_mode: 'HTML', ...message?.extra})
                            }
                            success++
                        } catch (e) {
                            error++
                        }
                    }

                })
            )

            return new Promise((resolve) => {

                setTimeout(async () => {
                    try {
                        await ctx.telegram.editMessageText(updateMsg.chat.id, updateMsg.message_id, updateMsg.message_id, `üïò –†–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è ${success+error} / ${users.length}...`,)
                    } catch (e) {
                        console.log(e)
                    }
                    resolve(await step())

                }, 1000)

            })
        }

        await step()
        return {
            success,
            error
        }
    } catch (e) {
        console.error(e)
    }
}
