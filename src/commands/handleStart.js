import {Referral, Setting, User} from "../models/models.js";
import _ from "lodash";
import {MenuButtons} from "../handlers/handleUser.js";

export default async function handleStart(ctx) {

    const referral = _.toInteger(ctx.startPayload) > 0 ? await Referral.findOne({
        where: { user_id: _.toInteger(ctx.startPayload) },
        raw: true
    }) : null

    const message = ctx.update.message
    const from = message.from

    const findUser = await User.findOne({ raw: true, where: { user_id: _.toInteger(from.id) } })

    if (!findUser?.id) {
        await User.create({
            user_id: _.toInteger(from.id),
            username: from.username,
            first_name: from.first_name,
            last_name: from.last_name,
            language_code: from.language_code,
            active: true,
            referral: _.toInteger(from.id) !== _.toInteger(referral?.user_id) ? _.toInteger(referral?.user_id) : null
        })

        if (findUser?.referral && _.toInteger(from.id) !== _.toInteger(referral?.user_id)) {
            await Referral?.update(
                {
                    count: _.toInteger(referral?.count) + 1
                },
                {
                    where: {user_id: _.toInteger(findUser?.user_id)}
                }
            )

            let userName = from?.username ? `@${from.username}` : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –Ω–∏–∫–∞'
            const setting = await Setting.findOne({raw: true})

            await ctx.telegram.sendMessage(
                _.toInteger(findUser?.referral),
                `${userName} –ø–µ—Ä–µ—à–µ–ª –ø–æ —Ç–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! \n\n üéâ –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ —Ä–∞–∑–º–µ—Ä–µ ${setting.discount}%! –¢—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –∫–æ–ª-–≤–æ –∏–º–µ—é—â–∏—Ö—Å—è –±–æ–Ω—É—Å–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ " üìé –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ "`,
                { parse_mode: 'HTML'}
            )
        }
    } else {
        await User.update({
            user_id: from.id,
            username: from.username,
            first_name: from.first_name,
            last_name: from.last_name,
            language_code: from.language_code,
            active: true,
            referral: _.toInteger(from.id) !== _.toInteger(referral?.user_id) ? _.toInteger(referral?.user_id) : null
        }, {
            raw: true,
            where: { user_id: _.toInteger(from.id) }
        })
    }

    const user = await User.findOne({
        raw: true,
        where: {
            user_id: _.toInteger(from.id)
        }
    })

    let text = `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é. @${user?.username}\n\n<b>–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã —Å–º–æ–∂–µ—à—å:</b>\n\n–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É \n"üìï –ö–∞—Ç–∞–ª–æ–≥"\n\n–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞–∂–∞–≤ \n"üóë –ö–æ—Ä–∑–∏–Ω–∞"\n\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ\n"üíº –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç"\n\n–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã,  –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –Ω–∞–∂–∞–≤\n"üß∑ –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"`;
    await MenuButtons(ctx, text)

}
