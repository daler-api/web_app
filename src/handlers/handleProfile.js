import {addBackButton, DATA_MENU} from "../utils/buttons/userButtons.js";
import {Order, Referral, Setting, User} from "../models/models.js";
import process from "node:process";
import {Markup} from "telegraf";
import {MenuButtons} from "./handleUser.js";
import _ from "lodash";

export async function handleMenu(ctx) {
    try {
        await ctx.deleteMessage()
        await MenuButtons(ctx)
    } catch (e) {
        console.log(e)
    }
}

export async function handlePaymentConfirmBackMenu(ctx) {
    try {
        await MenuButtons(ctx)
    } catch (e) {
        console.log(e)
    }
}

export async function handleChangePartner(ctx) {
    try {
        await ctx.deleteMessage()
        const partnerCount = await User.findAndCountAll({where: {referral: _.toInteger(ctx.from.id)}})

        const user = await User.findOne({
            raw: true,
            where: {
                user_id: _.toInteger(ctx.from.id),
            }
        })

        const referral = await Referral.findOne({
            raw: true,
            where: {
                user_id: _.toInteger(user?.user_id),
            }
        })

        const ref = `https://telegram.me/${process.env.BOT_USERNAME}?start=${_.toInteger(user?.user_id)}`
        const setting = await Setting.findOne({
            raw: true,
        })

        const url = `–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –±–æ—Ç–∞ –ø–æ –º–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π ${setting?.discount} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç —Å—É–º–º—ã –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –±–æ–Ω—É—Å–∞–º–∏ ‚òÄÔ∏è‚¨áÔ∏è\n\nhttps://t.me/share/url?url=${ref}`

        const bonus = referral?.id ? `${setting?.ref_bonus}% –æ—Ç —Å—É–º–º—ã –µ–≥–æ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏` : '1 —Ä—É–±–ª—è'

        await ctx.replyWithHTML(`‚ùóÔ∏è  <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\nüë´ –í—Å–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${partnerCount?.count}\n\nüí´ –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: ${_.toInteger(user?.bonus)}\n\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞, –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã –≤ —Ä–∞–∑–º–µ—Ä–µ ${bonus}.\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã, –ø–æ–¥–µ–ª–∏—Ç–µ–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π: <a href="https://t.me/share/url?url=${ref}">—Å—Å—ã–ª–∫–∞</a>\n\n –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è`, Object.assign({}, {
            disable_web_page_preview: true,
        }, Markup.inlineKeyboard([
            [
                Markup.button.switchToChat('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π üîó', url),
            ],
            [
                Markup.button.callback('üîô –ù–∞–∑–∞–¥', DATA_MENU),
            ]
        ])))

    } catch (e) {
        console.log(e)
    }
}

export async function handleCabinet(ctx) {
    try {
        await ctx.deleteMessage()
        let totalPrice = 0
        let orders = await Order.findAll({
            raw: true,
            where: {user_id: _.toInteger(ctx.from.id), isPayment: 1}
        }).then((orders) => {
            for (const key in orders) {
                totalPrice += _.toInteger(orders[key]?.total_price) ?? 0
            }
            return {
                totalPrice,
                count: orders?.length
            }
        })

        const user = await User.findOne({
            raw: true,
            where: {
                user_id: _.toInteger(ctx.from.id),
            }
        })

        await ctx.replyWithHTML(`üíº –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç\n\nüí´<b>–í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤</b>: ${user?.bonus ?? 0}\nüëú<b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</b>: ${orders?.count ?? 0} \nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: ${totalPrice ?? 0} —Ä—É–±`, addBackButton)
    } catch (e) {
        console.log(e);
    }
}
